#!/bin/bash

# Script de valida√ß√£o da configura√ß√£o Docker
# Verifica se todos os arquivos necess√°rios est√£o presentes e configurados corretamente

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Validando configura√ß√£o Docker do PriceGuard...${NC}"
echo ""

# Lista de arquivos obrigat√≥rios
required_files=(
    "Dockerfile"
    "Dockerfile.dev"
    "docker-compose.yml"
    "nginx.conf"
    "nginx-dev.conf"
    ".dockerignore"
    ".env.docker"
    "docker.sh"
    "docs/DOCKER_SETUP.md"
)

# Verificar se os arquivos existem
echo -e "${BLUE}üìÅ Verificando arquivos obrigat√≥rios...${NC}"
missing_files=()

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "  ‚úÖ $file"
    else
        echo -e "  ‚ùå $file ${RED}(AUSENTE)${NC}"
        missing_files+=("$file")
    fi
done

if [ ${#missing_files[@]} -gt 0 ]; then
    echo -e "\n${RED}‚ùå Arquivos ausentes encontrados!${NC}"
    exit 1
fi

echo -e "\n${GREEN}‚úÖ Todos os arquivos obrigat√≥rios est√£o presentes!${NC}"

# Verificar se o Docker est√° instalado
echo -e "\n${BLUE}üê≥ Verificando instala√ß√£o do Docker...${NC}"

if command -v docker &> /dev/null; then
    docker_version=$(docker --version)
    echo -e "  ‚úÖ Docker: $docker_version"
else
    echo -e "  ‚ùå Docker n√£o est√° instalado!"
    exit 1
fi

if command -v docker-compose &> /dev/null; then
    compose_version=$(docker-compose --version)
    echo -e "  ‚úÖ Docker Compose: $compose_version"
else
    echo -e "  ‚ùå Docker Compose n√£o est√° instalado!"
    exit 1
fi

# Verificar se o script docker.sh √© execut√°vel
echo -e "\n${BLUE}üîß Verificando permiss√µes...${NC}"
if [ -x "docker.sh" ]; then
    echo -e "  ‚úÖ docker.sh √© execut√°vel"
else
    echo -e "  ‚ö†Ô∏è  Tornando docker.sh execut√°vel..."
    chmod +x docker.sh
    echo -e "  ‚úÖ Permiss√µes corrigidas"
fi

# Verificar se o arquivo .env existe
echo -e "\n${BLUE}‚öôÔ∏è  Verificando configura√ß√£o de ambiente...${NC}"
if [ -f ".env" ]; then
    echo -e "  ‚úÖ Arquivo .env existe"
else
    echo -e "  ‚ö†Ô∏è  Arquivo .env n√£o encontrado, criando a partir de .env.docker..."
    cp .env.docker .env
    echo -e "  ‚úÖ Arquivo .env criado"
fi

# Validar sintaxe do docker-compose.yml
echo -e "\n${BLUE}üìã Validando sintaxe do docker-compose.yml...${NC}"
if docker-compose config > /dev/null 2>&1; then
    echo -e "  ‚úÖ docker-compose.yml tem sintaxe v√°lida"
else
    echo -e "  ‚ùå docker-compose.yml tem erros de sintaxe"
    exit 1
fi

# Verificar se as portas est√£o dispon√≠veis
echo -e "\n${BLUE}üîå Verificando disponibilidade de portas...${NC}"

check_port() {
    local port=$1
    local name=$2
    
    if netstat -tuln 2>/dev/null | grep -q ":$port "; then
        echo -e "  ‚ö†Ô∏è  Porta $port ($name) est√° em uso"
        return 1
    else
        echo -e "  ‚úÖ Porta $port ($name) dispon√≠vel"
        return 0
    fi
}

# Verificar portas principais
check_port 3000 "Desenvolvimento"
check_port 80 "Produ√ß√£o HTTP"
check_port 443 "Produ√ß√£o HTTPS"

echo -e "\n${GREEN}üéâ Valida√ß√£o conclu√≠da com sucesso!${NC}"
echo ""
echo -e "${BLUE}üöÄ Pr√≥ximos passos:${NC}"
echo -e "  1. Ajuste as vari√°veis no arquivo .env conforme necess√°rio"
echo -e "  2. Execute: ${GREEN}./docker.sh dev${NC} para desenvolvimento"
echo -e "  3. Execute: ${GREEN}./docker.sh prod${NC} para produ√ß√£o"
echo -e "  4. Consulte: ${GREEN}docs/DOCKER_SETUP.md${NC} para documenta√ß√£o completa"
echo ""
echo -e "${YELLOW}üí° Dica: Use './docker.sh help' para ver todos os comandos dispon√≠veis${NC}"
